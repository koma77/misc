error_log logs/error.log info;

events {
    worker_connections 1024;
}

http {
    #access_log off;
    include mime.types;

    lua_shared_dict locks 100k;

    init_worker_by_lua_block {
      local dict = ngx.shared.locks
      local ok, err = dict:add("hck_delayed", true, 30)
      if not ok then
        if err == "exists" then
            ngx.log(ngx.INFO, "lock already set: " .. err) 
            return
        else
            ngx.log(ngx.INFO, "failed to accuire lock: " .. err)
            return
        end
      end
      ngx.log(ngx.INFO, "lock is set.")
    }

    server {
        listen 8080;

        location / {
          lua_need_request_body on;
          content_by_lua_block {
            local dict = ngx.shared.locks
            local res, err = dict:get("hck_delayed")
            if res then
              ngx.status = 503
              ngx.say("I'am not ready yet.")
              ngx.exit(ngx.OK)
            else
              ngx.say("CLIENT VALUES:")
              ngx.say("client_address=", ngx.var.remote_addr)
              ngx.say("command=", ngx.req.get_method())
              ngx.say("real path=", ngx.var.request_uri)
              ngx.say("query=", ngx.var.query_string)
              ngx.say("request_version=", ngx.req.http_version())
              ngx.say("request_uri=", ngx.var.scheme.."://"..ngx.var.host..":"..ngx.var.server_port..ngx.var.request_uri)
              ngx.say("")
              ngx.say("SERVER VALUES:")
              ngx.say("server_version=", "nginx: "..ngx.var.nginx_version.." - lua: "..ngx.config.ngx_lua_version)
              ngx.say("")
              ngx.say("HEADERS RECEIVED:")
              local headers = ngx.req.get_headers()
              local keys = {}
              for key, val in pairs(headers) do
                  table.insert(keys, key)
              end
              table.sort(keys)
              for i, key in ipairs(keys) do
                  ngx.say(key, "=", headers[key])
              end
              ngx.say("BODY:")
              ngx.print(ngx.var.request_body or "-no body in request-")
            end
        }
      }
    }
}
